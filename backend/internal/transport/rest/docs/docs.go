// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/orders": {
            "get": {
                "description": "Retrieve a paginated list of all orders in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get orders list",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items per page",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Filter orders by user ID",
                        "name": "user_id",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Orders retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/OrdersResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid pagination parameters or user ID",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new order with multiple items, automatically handles stock reservation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Create new order",
                "parameters": [
                    {
                        "description": "Order creation data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Order created successfully",
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation failed or insufficient stock",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - user or product not found",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/orders/{order_id}": {
            "get": {
                "description": "Retrieve detailed information about a specific order using its unique identifier",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Get order by ID",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Order unique identifier",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order information retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid order ID format",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - order with specified ID does not exist",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing order's status or other mutable fields",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Update order",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Order unique identifier",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Order update data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateOrderRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order updated successfully",
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid order ID format or validation failed",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - order with specified ID does not exist",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/orders/{order_id}/cancel": {
            "post": {
                "description": "Cancel an order and restore product quantities back to inventory",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Orders"
                ],
                "summary": "Cancel order",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Order unique identifier",
                        "name": "order_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order cancelled successfully",
                        "schema": {
                            "$ref": "#/definitions/Order"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid order ID format or order cannot be cancelled",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - order with specified ID does not exist",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/products": {
            "get": {
                "description": "Retrieve a paginated list of all products in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Get products list",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items per page",
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Products retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/ProductsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid pagination parameters",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new product with description, tags, and initial quantity",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Create new product",
                "parameters": [
                    {
                        "description": "Product creation data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateProductRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Product created successfully",
                        "schema": {
                            "$ref": "#/definitions/Product"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation failed",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/products/{product_id}": {
            "get": {
                "description": "Retrieve detailed information about a specific product using its unique identifier",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Get product by ID",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Product unique identifier",
                        "name": "product_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product information retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/Product"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid product ID format",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - product with specified ID does not exist",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Update an existing product's information including description, tags, and quantity",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Update product",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "Product unique identifier",
                        "name": "product_id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Product update data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/UpdateProductRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Product updated successfully",
                        "schema": {
                            "$ref": "#/definitions/Product"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid product ID format or validation failed",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - product with specified ID does not exist",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users": {
            "get": {
                "description": "Retrieve a paginated list of all users in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get users list",
                "parameters": [
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Page number for pagination",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "maximum": 100,
                        "minimum": 1,
                        "type": "integer",
                        "default": 10,
                        "description": "Number of items per page",
                        "name": "size",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Users retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/UsersResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid pagination parameters",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Register a new user with validation (age \u003e= 18, password \u003e= 8 chars)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Register new user",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/CreateUserRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation failed",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/users/{user_id}": {
            "get": {
                "description": "Retrieve detailed information about a specific user using their unique identifier",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Get user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "format": "uuid",
                        "description": "User unique identifier",
                        "name": "user_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User information retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/User"
                        }
                    },
                    "400": {
                        "description": "Bad request - invalid user ID format",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not found - user with specified ID does not exist",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "CreateOrderItemRequest": {
            "description": "Request item for creating an order",
            "type": "object",
            "required": [
                "product_id",
                "quantity"
            ],
            "properties": {
                "product_id": {
                    "description": "Product ID\n@Description ID of the product to order\n@Example 456e7890-e12b-34d5-a678-901234567890",
                    "type": "string",
                    "example": "456e7890-e12b-34d5-a678-901234567890"
                },
                "quantity": {
                    "description": "Quantity\n@Description Quantity to order\n@Example 2",
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "CreateOrderRequest": {
            "description": "Request payload for creating an order",
            "type": "object",
            "required": [
                "items",
                "user_id"
            ],
            "properties": {
                "items": {
                    "description": "Items\n@Description List of items to order (at least one required)",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/CreateOrderItemRequest"
                    }
                },
                "user_id": {
                    "description": "User ID\n@Description ID of the user creating the order\n@Example 123e4567-e89b-12d3-a456-426614174000",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                }
            }
        },
        "CreateProductRequest": {
            "description": "Request payload for creating a product",
            "type": "object",
            "required": [
                "description",
                "quantity"
            ],
            "properties": {
                "description": {
                    "description": "Description\n@Description Product description (required)\n@Example \"High-quality smartphone\"",
                    "type": "string",
                    "example": "High-quality smartphone"
                },
                "quantity": {
                    "description": "Quantity\n@Description Initial quantity in stock\n@Example 100",
                    "type": "integer",
                    "minimum": 0,
                    "example": 100
                },
                "tags": {
                    "description": "Tags\n@Description Product tags for categorization\n@Example [\"electronics\", \"mobile\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "electronics",
                        "mobile"
                    ]
                }
            }
        },
        "CreateUserRequest": {
            "description": "Request payload for user registration",
            "type": "object",
            "required": [
                "age",
                "first_name",
                "last_name",
                "password"
            ],
            "properties": {
                "age": {
                    "description": "Age\n@Description User's age (must be 18 or older)\n@Example 25",
                    "type": "integer",
                    "minimum": 18,
                    "example": 25
                },
                "first_name": {
                    "description": "First name\n@Description User's first name (required)\n@Example John",
                    "type": "string",
                    "example": "John"
                },
                "is_married": {
                    "description": "Is married\n@Description Whether the user is married\n@Example false",
                    "type": "boolean",
                    "example": false
                },
                "last_name": {
                    "description": "Last name\n@Description User's last name (required)\n@Example Doe",
                    "type": "string",
                    "example": "Doe"
                },
                "password": {
                    "description": "Password\n@Description User's password (minimum 8 characters)\n@Example password123",
                    "type": "string",
                    "minLength": 8,
                    "example": "password123"
                }
            }
        },
        "ErrorResponse": {
            "description": "Error response format",
            "type": "object",
            "properties": {
                "code": {
                    "description": "Error code (optional)\n@Description Machine-readable error code\n@Example \"INVALID_INPUT\"",
                    "type": "string",
                    "example": "INVALID_INPUT"
                },
                "message": {
                    "description": "Error message\n@Description Human-readable error message\n@Example \"Validation failed\"",
                    "type": "string",
                    "example": "Validation failed"
                }
            }
        },
        "Order": {
            "description": "Order information with items",
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Created at\n@Description When the order was created\n@Example 2024-01-15T10:30:00Z",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "id": {
                    "description": "Order ID\n@Description Unique identifier for the order\n@Example 987e6543-e21d-12c3-b456-426614174000",
                    "type": "string",
                    "example": "987e6543-e21d-12c3-b456-426614174000"
                },
                "items": {
                    "description": "Items\n@Description List of items in the order",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/OrderItem"
                    }
                },
                "status": {
                    "description": "Status\n@Description Current order status\n@Example \"pending\"",
                    "type": "string",
                    "example": "pending"
                },
                "total_quantity": {
                    "description": "Total quantity\n@Description Total quantity of all items in the order\n@Example 5",
                    "type": "integer",
                    "example": 5
                },
                "updated_at": {
                    "description": "Updated at\n@Description When the order was last updated\n@Example 2024-01-15T10:30:00Z",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "user_id": {
                    "description": "User ID\n@Description ID of the user who created the order\n@Example 123e4567-e89b-12d3-a456-426614174000",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                }
            }
        },
        "OrderItem": {
            "description": "Order item with historical product information",
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Created at\n@Description When the order item was created\n@Example 2024-01-15T10:30:00Z",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "id": {
                    "description": "Item ID\n@Description Unique identifier for the order item\n@Example 789e0123-e45f-67g8-h901-234567890123",
                    "type": "string",
                    "example": "789e0123-e45f-67g8-h901-234567890123"
                },
                "product_id": {
                    "description": "Product ID\n@Description ID of the product (current)\n@Example 456e7890-e12b-34d5-a678-901234567890",
                    "type": "string",
                    "example": "456e7890-e12b-34d5-a678-901234567890"
                },
                "product_snapshot": {
                    "description": "Product snapshot\n@Description Historical product information at order time",
                    "allOf": [
                        {
                            "$ref": "#/definitions/ProductSnapshot"
                        }
                    ]
                },
                "quantity": {
                    "description": "Quantity\n@Description Quantity of the product in the order\n@Example 2",
                    "type": "integer",
                    "example": 2
                }
            }
        },
        "OrdersResponse": {
            "description": "Paginated response containing list of orders",
            "type": "object",
            "properties": {
                "orders": {
                    "description": "Orders\n@Description List of orders",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Order"
                    }
                },
                "pagination": {
                    "description": "Pagination\n@Description Pagination information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Pagination"
                        }
                    ]
                }
            }
        },
        "Pagination": {
            "description": "Pagination metadata for API responses",
            "type": "object",
            "properties": {
                "page": {
                    "description": "Page number (1-based)\n@Description Current page number\n@Example 1",
                    "type": "integer",
                    "example": 1
                },
                "size": {
                    "description": "Size (items per page)\n@Description Number of items per page\n@Example 10",
                    "type": "integer",
                    "example": 10
                },
                "total": {
                    "description": "Total count\n@Description Total number of items available\n@Example 100",
                    "type": "integer",
                    "example": 100
                },
                "total_pages": {
                    "description": "Total pages\n@Description Total number of pages\n@Example 10",
                    "type": "integer",
                    "example": 10
                }
            }
        },
        "Product": {
            "description": "Product information",
            "type": "object",
            "properties": {
                "available": {
                    "description": "Available\n@Description Whether the product is available (quantity \u003e 0)\n@Example true",
                    "type": "boolean",
                    "example": true
                },
                "created_at": {
                    "description": "Created at\n@Description When the product was created\n@Example 2024-01-15T10:30:00Z",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "description": {
                    "description": "Description\n@Description Product description\n@Example \"High-quality smartphone\"",
                    "type": "string",
                    "example": "High-quality smartphone"
                },
                "id": {
                    "description": "Product ID\n@Description Unique identifier for the product\n@Example 456e7890-e12b-34d5-a678-901234567890",
                    "type": "string",
                    "example": "456e7890-e12b-34d5-a678-901234567890"
                },
                "quantity": {
                    "description": "Quantity\n@Description Available quantity in stock\n@Example 100",
                    "type": "integer",
                    "example": 100
                },
                "tags": {
                    "description": "Tags\n@Description Product tags for categorization\n@Example [\"electronics\", \"mobile\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "electronics",
                        "mobile"
                    ]
                },
                "updated_at": {
                    "description": "Updated at\n@Description When the product was last updated\n@Example 2024-01-15T10:30:00Z",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                }
            }
        },
        "ProductSnapshot": {
            "description": "Historical product data captured at order time",
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description\n@Description Product description at order time\n@Example \"High-quality smartphone\"",
                    "type": "string",
                    "example": "High-quality smartphone"
                },
                "tags": {
                    "description": "Tags\n@Description Product tags at order time\n@Example [\"electronics\", \"mobile\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "electronics",
                        "mobile"
                    ]
                }
            }
        },
        "ProductsResponse": {
            "description": "Paginated response containing list of products",
            "type": "object",
            "properties": {
                "pagination": {
                    "description": "Pagination\n@Description Pagination information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Pagination"
                        }
                    ]
                },
                "products": {
                    "description": "Products\n@Description List of products",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Product"
                    }
                }
            }
        },
        "UpdateOrderRequest": {
            "description": "Request payload for updating order status",
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "description": "Status\n@Description New order status\n@Example \"confirmed\"",
                    "type": "string",
                    "enum": [
                        "pending",
                        "confirmed",
                        "cancelled",
                        "completed"
                    ],
                    "example": "confirmed"
                }
            }
        },
        "UpdateProductRequest": {
            "description": "Request payload for updating a product",
            "type": "object",
            "properties": {
                "description": {
                    "description": "Description\n@Description Product description (optional)\n@Example \"Updated smartphone description\"",
                    "type": "string",
                    "example": "Updated smartphone description"
                },
                "quantity": {
                    "description": "Quantity\n@Description Quantity in stock (optional)\n@Example 150",
                    "type": "integer",
                    "minimum": 0,
                    "example": 150
                },
                "tags": {
                    "description": "Tags\n@Description Product tags for categorization (optional)\n@Example [\"electronics\", \"mobile\", \"updated\"]",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "electronics",
                        "mobile",
                        "updated"
                    ]
                }
            }
        },
        "User": {
            "description": "User information",
            "type": "object",
            "properties": {
                "age": {
                    "description": "Age\n@Description User's age (must be 18 or older)\n@Example 25",
                    "type": "integer",
                    "example": 25
                },
                "created_at": {
                    "description": "Created at\n@Description When the user was created\n@Example 2024-01-15T10:30:00Z",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "first_name": {
                    "description": "First name\n@Description User's first name\n@Example John",
                    "type": "string",
                    "example": "John"
                },
                "full_name": {
                    "description": "Full name\n@Description User's full name (first + last)\n@Example John Doe",
                    "type": "string",
                    "example": "John Doe"
                },
                "id": {
                    "description": "User ID\n@Description Unique identifier for the user\n@Example 123e4567-e89b-12d3-a456-426614174000",
                    "type": "string",
                    "example": "123e4567-e89b-12d3-a456-426614174000"
                },
                "is_married": {
                    "description": "Is married\n@Description Whether the user is married\n@Example false",
                    "type": "boolean",
                    "example": false
                },
                "last_name": {
                    "description": "Last name\n@Description User's last name\n@Example Doe",
                    "type": "string",
                    "example": "Doe"
                }
            }
        },
        "UsersResponse": {
            "description": "Paginated response containing list of users",
            "type": "object",
            "properties": {
                "pagination": {
                    "description": "Pagination\n@Description Pagination information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/Pagination"
                        }
                    ]
                },
                "users": {
                    "description": "Users\n@Description List of users",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/User"
                    }
                }
            }
        }
    },
    "tags": [
        {
            "description": "User registration and management",
            "name": "Users"
        },
        {
            "description": "Product catalog management",
            "name": "Products"
        },
        {
            "description": "Order management with stock control",
            "name": "Orders"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "MTS API",
	Description:      "MTS test assignment API for managing users, products and orders",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
